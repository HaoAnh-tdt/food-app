# FROM php:8.2-fpm

# # Install system dependencies
# RUN apt-get update && apt-get install -y \
#     nginx \
#     git \
#     unzip \
#     libpng-dev \
#     libonig-dev \
#     libxml2-dev \
#     libzip-dev \
#     zip \
#     curl \
#     supervisor \
#     && rm -rf /var/lib/apt/lists/*

# # Install PHP extensions
# RUN docker-php-ext-install pdo pdo_mysql mbstring exif pcntl bcmath zip gd

# # Install Composer
# COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# # Set working directory
# WORKDIR /var/www

# # Copy application files
# COPY . /var/www

# # Install dependencies
# RUN composer install --no-dev --optimize-autoloader --no-interaction

# # Set permissions
# RUN chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache \
#     && chmod -R 775 /var/www/storage /var/www/bootstrap/cache

# # Copy nginx configuration
# COPY docker/nginx.conf /etc/nginx/sites-available/default

# # Copy supervisor configuration
# COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# # Copy start script
# COPY docker/start.sh /usr/local/bin/start.sh
# RUN chmod +x /usr/local/bin/start.sh

# # Create necessary directories
# RUN mkdir -p /var/run/php /var/log/supervisor

# # Expose port (will be overridden by Render)
# EXPOSE 8080

# # Start application
# CMD ["/usr/local/bin/start.sh"]




# FROM php:8.2-fpm

# WORKDIR /var/www

# RUN apt-get update && apt-get install -y \
#     zip unzip curl git libxml2-dev libzip-dev libpng-dev libjpeg-dev libonig-dev \
#     sqlite3 libsqlite3-dev

# RUN docker-php-ext-install pdo pdo_mysql mbstring exif pcntl bcmath gd zip

# COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# COPY . /var/www
# COPY --chown=www-data:www-data . /var/www

# RUN chmod -R 755 /var/www
# RUN composer install

# COPY env.example .env
# RUN php artisan key:generate

# EXPOSE 8000
# CMD php artisan serve --host=0.0.0.0 --port=8000

# FROM php:8.2-fpm

# WORKDIR /var/www

# # system deps
# RUN apt-get update && apt-get install -y \
#     zip unzip curl git libxml2-dev libzip-dev libpng-dev libjpeg-dev libonig-dev \
#     sqlite3 libsqlite3-dev

# # php extensions
# RUN docker-php-ext-install pdo pdo_mysql mbstring exif pcntl bcmath gd zip

# # composer binary
# COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# # copy code (chỉ 1 lần). nếu muốn set owner ngay lúc copy:
# COPY --chown=www-data:www-data . /var/www

# # file permissions
# RUN chmod -R 755 /var/www \
#  && chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache || true

# # install php deps (production-friendly)
# RUN composer install --no-dev --optimize-autoloader --no-interaction || composer install --no-interaction

# # don't generate APP_KEY at build time
# # COPY env.example .env   # optional - better to use Render env vars or secret file

# # copy entrypoint
# COPY docker/entrypoint.sh /entrypoint.sh
# RUN chmod +x /entrypoint.sh

# EXPOSE 8000

# CMD ["/entrypoint.sh"]


FROM php:8.2-fpm

# Cài extension PHP cần thiết
RUN apt-get update && apt-get install -y \
    git curl libpng-dev libonig-dev libxml2-dev zip unzip \
    && docker-php-ext-install pdo pdo_mysql mbstring exif pcntl bcmath gd

# Cài composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Tạo thư mục làm việc
WORKDIR /var/www

# Copy code vào container (sẽ không copy vendor nếu có .dockerignore)
COPY . .

# Cài thư viện Laravel từ đầu
RUN composer install --optimize-autoloader --no-dev

# Cấp quyền
RUN chmod -R 775 storage bootstrap/cache && \
    chown -R www-data:www-data storage bootstrap/cache

EXPOSE 8000

CMD php artisan serve
